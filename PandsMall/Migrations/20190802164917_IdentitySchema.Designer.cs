// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PandsMall.Data.ContextClass;

namespace PandsMall.Migrations
{
    [DbContext(typeof(PandsContext))]
    [Migration("20190802164917_IdentitySchema")]
    partial class IdentitySchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PandsMall.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2019, 8, 2, 17, 49, 15, 648, DateTimeKind.Local).AddTicks(4211),
                            DateUpdated = new DateTime(2019, 8, 2, 17, 49, 15, 648, DateTimeKind.Local).AddTicks(4229),
                            Name = "Toiletries"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2019, 8, 2, 17, 49, 15, 648, DateTimeKind.Local).AddTicks(4261),
                            DateUpdated = new DateTime(2019, 8, 2, 17, 49, 15, 648, DateTimeKind.Local).AddTicks(4261),
                            Name = "Fruits"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2019, 8, 2, 17, 49, 15, 648, DateTimeKind.Local).AddTicks(4261),
                            DateUpdated = new DateTime(2019, 8, 2, 17, 49, 15, 648, DateTimeKind.Local).AddTicks(4265),
                            Name = "Drinks"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2019, 8, 2, 17, 49, 15, 648, DateTimeKind.Local).AddTicks(4265),
                            DateUpdated = new DateTime(2019, 8, 2, 17, 49, 15, 648, DateTimeKind.Local).AddTicks(4265),
                            Name = "Kitchen"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2019, 8, 2, 17, 49, 15, 648, DateTimeKind.Local).AddTicks(4270),
                            DateUpdated = new DateTime(2019, 8, 2, 17, 49, 15, 648, DateTimeKind.Local).AddTicks(4270),
                            Name = "Bakeries"
                        });
                });

            modelBuilder.Entity("PandsMall.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<short>("QuantityInPackage");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            DateCreated = new DateTime(2019, 8, 2, 17, 49, 15, 644, DateTimeKind.Local).AddTicks(5013),
                            DateUpdated = new DateTime(2019, 8, 2, 17, 49, 15, 646, DateTimeKind.Local).AddTicks(3153),
                            Name = "Delta Soap",
                            Price = 750.0,
                            QuantityInPackage = (short)6
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            DateCreated = new DateTime(2019, 8, 2, 17, 49, 15, 646, DateTimeKind.Local).AddTicks(4195),
                            DateUpdated = new DateTime(2019, 8, 2, 17, 49, 15, 646, DateTimeKind.Local).AddTicks(4209),
                            Name = "Apple",
                            Price = 500.0,
                            QuantityInPackage = (short)6
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            DateCreated = new DateTime(2019, 8, 2, 17, 49, 15, 646, DateTimeKind.Local).AddTicks(4222),
                            DateUpdated = new DateTime(2019, 8, 2, 17, 49, 15, 646, DateTimeKind.Local).AddTicks(4227),
                            Name = "Pepsi",
                            Price = 1500.0,
                            QuantityInPackage = (short)12
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            DateCreated = new DateTime(2019, 8, 2, 17, 49, 15, 646, DateTimeKind.Local).AddTicks(4227),
                            DateUpdated = new DateTime(2019, 8, 2, 17, 49, 15, 646, DateTimeKind.Local).AddTicks(4231),
                            Name = "Gas Cooker",
                            Price = 3000.0,
                            QuantityInPackage = (short)1
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            DateCreated = new DateTime(2019, 8, 2, 17, 49, 15, 646, DateTimeKind.Local).AddTicks(4236),
                            DateUpdated = new DateTime(2019, 8, 2, 17, 49, 15, 646, DateTimeKind.Local).AddTicks(4236),
                            Name = "Meat Pie",
                            Price = 300.0,
                            QuantityInPackage = (short)1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PandsMall.Data.Entities.Product", b =>
                {
                    b.HasOne("PandsMall.Data.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
